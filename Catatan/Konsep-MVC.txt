MVC (Model View Controller)
	Pola desain ini membantu kami mengembangkan aplikasi yang digabungkan secara longgar dengan memisahkan berbagai masalah menjadi beberapa lapisan. 
	Pola desain MVC memaksa aplikasi untuk dibagi menjadi tiga lapisan, Model, View dan Controller.

	1. Model: Ini mewakili data aplikasi.
	2. View: Ini mewakili antarmuka pengguna aplikasi. View mengambil model sebagai input dan menjadikannya sesuai untuk end user.
	3. Controller: Pengontrol bertanggung jawab untuk menangani permintaan dan menghasilkan model dan memilih tampilan yang sesuai untuk permintaan tersebut.
	
Spring’s MVC module
	Modul MVC Spring didasarkan pada pola desain pengontrol depan diikuti oleh pola desain MVC. 
	Semua permintaan yang masuk ditangani oleh servlet tunggal bernama DispatcherServlet yang bertindak sebagai pengontrol depan dalam modul MVC Spring. 
	DispatcherServlet kemudian merujuk ke HandlerMapping untuk menemukan objek pengontrol yang dapat menangani permintaan.
	DispatcherServlet kemudian mengirimkan permintaan ke objek pengontrol sehingga benar-benar dapat melakukan logika bisnis untuk memenuhi permintaan pengguna. 
	(Pengontrol dapat mendelegasikan tanggung jawab ke objek aplikasi lebih lanjut yang dikenal sebagai objek layanan).
	Pengontrol mengembalikan objek enkapsulasi yang berisi objek model dan objek tampilan (atau nama logis tampilan). 
	Dalam Spring MVC, objek enkapsulasi ini diwakili oleh class ModelAndView. Jika ModelAndView berisi nama logis dari tampilan, 
	DispatcherServlet merujuk pada ViewResolver untuk menemukan objek tampilan aktual berdasarkan pada nama logis. 
	DispatcherServlet kemudian meneruskan objek model ke objek tampilan yang kemudian diberikan kepada pengguna akhir.	
	
# DispatcherServlet
   DispatcherServlet bertindak sebagai pengontrol depan dalam modul MVC Spring. 
   Semua permintaan pengguna ditangani oleh servlet ini. Karena ini seperti servlet lainnya, 
   itu harus dikonfigurasikan dalam file deskriptor penerapan web aplikasi yaitu web.xml.
 	
#  Spring Application Context
   1. Default Application context file
      by default dispatcher servlet memuat konteks aplikasi Spring dari file XML dengan nama [servlet name]-servlet.xml. 
	  Jadi ketika servlet myLibraryAppFrontController kami dimuat oleh kontainer, 
	  itu akan memuat konteks aplikasi Spring dari file XML "/WEB-INF/myLibraryAppFrontController-servlet.xml".
	 
   2. User defined application context file
      Kami dapat mengganti nama dan lokasi file XML default dengan memberikan parameter inisialisasi ke servlet operator. 
	  Nama parameter inisialisasi adalah contextConfigLocation. Nilai parameter menentukan nama dan lokasi konteks aplikasi yang perlu dimuat oleh kontainer.
	 
   3. Multiple application context files	
      Ini adalah praktik yang baik untuk membagi aplikasi menjadi beberapa unit logis dan memiliki beberapa file konteks aplikasi. 
	  Jadi pada inisialisasi servlet kita perlu memuat semua file konteks aplikasi ini. 
	  Dimungkinkan untuk memuat konteks aplikasi Spring dari beberapa file XML seperti yang ditunjukkan di bawah ini:
	 
#  Spring Handler mappings	 
   
      Seperti namanya, handler mapping memetakan permintaan dengan handler permintaan yang sesuai (pada kenyataannya rantai eksekusi handler). 
	  Ketika sebuah permintaan datang ke servlet operator Musim Semi, ia menyerahkan permintaan tersebut ke pemetaan pawang. 
	  Pemetaan handler kemudian memeriksa permintaan dan mengidentifikasi rantai eksekusi handler yang sesuai dan mengirimkannya ke server pengirim. 
	  Rantai eksekusi pawang berisi pawang yang cocok dengan permintaan yang masuk dan secara opsional berisi daftar pencegat yang diterapkan 
	  untuk permintaan tersebut. Servlet operator kemudian mengeksekusi penangan dan pencegat penangan terkait.
      Ada sejumlah implementasi pemetaan hander yang disediakan oleh modul MVC Spring. Beberapa di antaranya diuraikan di bawah ini. 
	  Semua kelas pemetaan handler menerapkan antarmuka org.springframework.web.servlet.HandlerMapping.
	  
   1. BeanNameUrlHandlerMapping  
      Implementasi handler mapping ini cocok dengan URL permintaan yang masuk dengan nama bean controller. 
	  bean yang cocok kemudian digunakan sebagai pengontrol untuk permintaan tersebut. 
	  Ini adalah pemetaan penangan default yang digunakan oleh modul MVC Spring yaitu jika servlet pengirim tidak menemukan handler mapping controller 
	  yang didefinisikan dalam konteks aplikasi Spring maka servlet pengirim menggunakan BeanNameUrlHandlerMapping.
	  
   2. SimpleUrlHandlerMapping
      BeanNameUrlHandlerMapping memberi batasan pada nama kacang pengontrol yang harus cocok dengan URL permintaan yang masuk. 
	  SimpleUrlHandlerMapping menghapus pembatasan ini dan memetakan kacang pengontrol untuk meminta URL menggunakan “pemetaan” properti.

#  Spring Controller
   1. AbstractController
   2. MultiActionController

#  MethodNameResolver
   1. ParameterMethodNameResolver 
   2. PropertiesMethodNameResolver
   
#  ModelAndView and ViewResolver   